@startuml

left to right direction

class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
Startup --> "Configuration" IConfiguration
class DonorController {
    + DonorController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(donor:Donor) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, donor:Donor) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Donor) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
class "IUserInterfaceCRUD`1"<T> {
}
class "GenericRepository`1"<T> {
}
ControllerBase <|-- DonorController
"IUserInterfaceCRUD`1" "<Donor>" <|-- DonorController
DonorController --> "DonorRepository<Donor>" "GenericRepository`1"
DonorController o-> "settings" JsonSerializerSettings
class EmployeeController {
    + EmployeeController(context:DBContext)
    + <<async>> Create(template:Employee) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:Employee) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Employee) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
    + Exists(id:string) : bool
}
class "IUserInterfaceCRUD`1"<T> {
}
class "GenericRepository`1"<T> {
}
ControllerBase <|-- EmployeeController
"IUserInterfaceCRUD`1" "<Employee>" <|-- EmployeeController
EmployeeController --> "EmployeeRepository<Employee>" "GenericRepository`1"
class ProjectController {
    + ProjectController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(template:Project) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:Project) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Project) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
class "IUserInterfaceCRUD`1"<T> {
}
class "GenericRepository`1"<T> {
}
ControllerBase <|-- ProjectController
"IUserInterfaceCRUD`1" "<Project>" <|-- ProjectController
ProjectController --> "ProjectRepository<Project>" "GenericRepository`1"
ProjectController --> "ServiceCenterRepository<ServiceCenter>" "GenericRepository`1"
ProjectController o-> "settings" JsonSerializerSettings
class ServiceCenterController {
    + ServiceCenterController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(template:ServiceCenter) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:ServiceCenter) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:ServiceCenter) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + Settings() : string
}
class "IUserInterfaceCRUD`1"<T> {
}
class "GenericRepository`1"<T> {
}
ControllerBase <|-- ServiceCenterController
"IUserInterfaceCRUD`1" "<ServiceCenter>" <|-- ServiceCenterController
ServiceCenterController --> "ServiceCenterRepository<ServiceCenter>" "GenericRepository`1"
ServiceCenterController --> "UserRepository<User>" "GenericRepository`1"
ServiceCenterController o-> "settings" JsonSerializerSettings
class UserController {
    + UserController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> LoginUser(user:User) : Task<ActionResult<String>>
    + <<async>> Create(template:User) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:User) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:User) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
class "IUserInterfaceCRUD`1"<T> {
}
ControllerBase <|-- UserController
"IUserInterfaceCRUD`1" "<User>" <|-- UserController
UserController --> "UserRepository" UserRepository
class VolunteerController {
    + VolunteerController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(template:Volunteer) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:Volunteer) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Volunteer) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
class "IUserInterfaceCRUD`1"<T> {
}
class "GenericRepository`1"<T> {
}
ControllerBase <|-- VolunteerController
"IUserInterfaceCRUD`1" "<Volunteer>" <|-- VolunteerController
VolunteerController --> "VolunteerRepository<Volunteer>" "GenericRepository`1"
VolunteerController --> "EmployeeRepository<Employee>" "GenericRepository`1"
VolunteerController o-> "settings" JsonSerializerSettings
class VolunteerWorkController {
    + VolunteerWorkController(context:DBContext)
    + <<async>> Create(template:VolunteerWork) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:VolunteerWork) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:VolunteerWork) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + Exists(id:string) : bool
    + Settings() : string
}
class "IUserInterfaceCRUD`1"<T> {
}
class "GenericRepository`1"<T> {
}
ControllerBase <|-- VolunteerWorkController
"IUserInterfaceCRUD`1" "<VolunteerWork>" <|-- VolunteerWorkController
VolunteerWorkController --> "VolunteerWorkRepository<VolunteerWork>" "GenericRepository`1"
VolunteerWorkController --> "VolunteerRepository<Volunteer>" "GenericRepository`1"
VolunteerWorkController --> "EmployeeRepository<Employee>" "GenericRepository`1"
VolunteerWorkController --> "ProjectRepository<Project>" "GenericRepository`1"
VolunteerWorkController o-> "settings" JsonSerializerSettings
class "GenericRepository`1"<TEntity> {
    + GenericRepository(context:DBContext)
    + <<virtual>> GetAll(filter:Expression<Func<TEntity, bool>>, orderBy:Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>>, includeProperties:string) : IEnumerable<TEntity>
    + <<virtual>> GetByID(id:object) : TEntity
    + <<virtual>> Insert(entity:TEntity) : bool
    + <<virtual>> Update(entityToUpdate:TEntity) : bool
    + <<virtual>> Delete(id:object) : bool
    + <<virtual>> Delete(entityToDelete:TEntity) : bool
    + <<virtual>> <<async>> GetAllAsync(filter:Expression<Func<TEntity, bool>>, orderBy:Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>>, includeProperties:string) : Task<IEnumerable<TEntity>>
    + <<virtual>> <<async>> GetByIDAsync(id:object) : Task<TEntity>
    + <<virtual>> <<async>> InsertAsync(entity:TEntity) : Task<bool>
    + <<virtual>> <<async>> UpdateAsync(entityToUpdate:TEntity) : Task<bool>
    + <<virtual>> <<async>> DeleteAsync(id:object) : Task<bool>
    + <<virtual>> <<async>> DeleteAsync(entityToDelete:TEntity) : Task<bool>
    + Save() : void
    + <<async>> SaveAsync() : Task
}
class "IGenericDataRepository`1"<T> {
}
class "DbSet`1"<T> {
}
"IGenericDataRepository`1" "<TEntity>" <|-- "GenericRepository`1"
"GenericRepository`1" --> "context" DBContext
"GenericRepository`1" --> "dbSet<TEntity>" "DbSet`1"
class RepositoryReference {
    + RepositoryReference(context:DBContext)
    + BeginTransaction() : void
    + Commit() : void
    + Dispose() : void
    + Rollback() : void
}
class "GenericRepository`1"<T> {
}
IRepositoryReference <|-- RepositoryReference
IDisposable <|-- RepositoryReference
RepositoryReference --> "context" DBContext
RepositoryReference --> "employeeRepository<Employee>" "GenericRepository`1"
RepositoryReference --> "donorRepository<Donor>" "GenericRepository`1"
RepositoryReference --> "projectRepository<Project>" "GenericRepository`1"
RepositoryReference --> "serviceCenterRepository<ServiceCenter>" "GenericRepository`1"
RepositoryReference --> "userRepository" UserRepository
RepositoryReference --> "volunteerRepository<Volunteer>" "GenericRepository`1"
RepositoryReference --> "volunteerWorkRepository<VolunteerWork>" "GenericRepository`1"
RepositoryReference --> "EmployeeRepository<Employee>" "GenericRepository`1"
RepositoryReference --> "DonorRepository<Donor>" "GenericRepository`1"
RepositoryReference --> "ProjectRepository<Project>" "GenericRepository`1"
RepositoryReference --> "ServiceCenterRepository<ServiceCenter>" "GenericRepository`1"
RepositoryReference --> "UserRepository" UserRepository
RepositoryReference --> "VolunteerRepository<Volunteer>" "GenericRepository`1"
RepositoryReference --> "VolunteerWorkRepository<VolunteerWork>" "GenericRepository`1"
class UserRepository {
    + UserRepository(context:DBContext)
    + <<virtual>> <<async>> Login(username:string, password:string) : Task<User>
    + <<virtual>> <<async>> Register(username:string, password:string) : Task<User>
}
class "GenericRepository`1"<T> {
}
"GenericRepository`1" "<User>" <|-- UserRepository
class DBContext {
    + DBContext(options:DbContextOptions<DBContext>)
    + DBContext()
    # <<override>> OnModelCreating(modelBuilder:ModelBuilder) : void
}
DbContext <|-- DBContext
interface "IUserInterfaceCRUD`1"<T> {
    Create(template:T) : Task<ActionResult<string>>
    Get(id:string) : Task<ActionResult<string>>
    Update(id:string, template:T) : Task<ActionResult<string>>
    UpdateAndFetchAll(id:string, template:T) : Task<ActionResult<string>>
    Delete(id:string) : Task<ActionResult<string>>
    All() : Task<ActionResult<string>>
    Settings() : string
    Exists(id:string) : bool
}
class restructurev1 <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- restructurev1
class restructurev1 <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class createdDonorType <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- createdDonorType
class createdDonorType <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class createdVolunteerWork <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- createdVolunteerWork
class createdVolunteerWork <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class DBContextModelSnapshot <<partial>> {
    # <<override>> BuildModel(modelBuilder:ModelBuilder) : void
}
ModelSnapshot <|-- DBContextModelSnapshot
class Donor {
    + donorName : string <<get>> <<set>>
    + donorType : string <<get>> <<set>>
}
User <|-- Donor
Donor --> "User" User
class Employee {
    + EmployeeNationalId : string <<get>> <<set>>
    + BankName : string <<get>> <<set>>
    + BankAccountNumber : string <<get>> <<set>>
    + PAYE : string <<get>> <<set>>
    + DateJoined : string <<get>> <<set>>
    + EmployeeType : string <<get>> <<set>>
    + EmployeeRole : string <<get>> <<set>>
}
User <|-- Employee
Employee --> "User" User
class Project {
    + Project()
    + ProjectId : string <<get>> <<set>>
    + ProjectName : string <<get>> <<set>>
    + ProjectDescription : string <<get>> <<set>>
    + ProjectStartDate : string <<get>> <<set>>
    + ProjectEndDate : string <<get>> <<set>>
    + ProjectCompletionDate : string <<get>> <<set>>
    + ProjectStatus : string <<get>> <<set>>
    + ProjectType : string <<get>> <<set>>
    + ProjectBudget : double <<get>> <<set>>
    + ServiceCenterId : string <<get>> <<set>>
}
Project --> "ServiceCenter" ServiceCenter
class ServiceCenter {
    + ServiceCenter()
    + ServiceCenterId : string <<get>> <<set>>
    + ServiceCenterName : string <<get>> <<set>>
    + ServiceCenterAddress : string <<get>> <<set>>
    + RegionalDirectorId : string <<get>> <<set>>
    + <<virtual>> RegionalDirectorName : string <<get>> <<set>>
}
ServiceCenter --> "RegionalDirector" Employee
class Settings {
}
class UserSettings {
    + UserSettings()
}
class InputType {
    + type : string <<get>> <<set>>
    + displayLabel : string <<get>> <<set>>
    + editable : bool <<get>> <<set>>
    + primaryKey : bool <<get>> <<set>>
    + toolTip : string <<get>> <<set>>
}
class "DropdownInputType`1"<T> {
}
class DropdownInputType {
}
class "DropdownOption`1"<T> {
    + value : T <<get>> <<set>>
    + label : string <<get>> <<set>>
}
class DropdownOption {
    + value : string <<get>> <<set>>
    + label : string <<get>> <<set>>
}
class ColumnHeader {
    + displayHeader : string <<get>> <<set>>
}
class "Dictionary`2"<T1,T2> {
}
class "List`1"<T> {
}
Settings --> "ColumnSettings<string,ColumnHeader>" "Dictionary`2"
Settings --> "FieldSettings<string,InputType>" "Dictionary`2"
Settings <|-- UserSettings
InputType <|-- "DropdownInputType`1"
"DropdownInputType`1" --> "options<DropdownOption<T>>" "List`1"
InputType <|-- DropdownInputType
DropdownInputType --> "options<DropdownOption>" "List`1"
class User {
    + User()
    + UserId : string <<get>> <<set>>
    + username : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + Role : string <<get>> <<set>>
    + phoneNumber : string <<get>> <<set>>
    + address : string <<get>> <<set>>
}
class Volunteer {
    + VolunteerNationalId : string <<get>> <<set>>
    + VolunteerDateJoined : string <<get>> <<set>>
    + VolunteerDateBirth : string <<get>> <<set>>
    + Qualifications : string <<get>> <<set>>
    + CriminalHistory : string <<get>> <<set>>
    + CriminalHistoryDesc : string <<get>> <<set>>
    + ApprovalStatus : string <<get>> <<set>>
    + ApprovedBy : string <<get>> <<set>>
}
User <|-- Volunteer
Volunteer --> "User" User
class VolunteerWork {
    VolunteerWork()
    + VolunteerWorkId : string <<get>> <<set>>
    + ShiftStart : string <<get>> <<set>>
    + ShiftEnd : string <<get>> <<set>>
    + SupervisingEmployee : string <<get>> <<set>>
    + VolunteerId : string <<get>> <<set>>
    + projectId : string <<get>> <<set>>
}
VolunteerWork --> "employee" Employee
VolunteerWork --> "volunteer" Volunteer
VolunteerWork --> "project" Project
class ErrorModel {
    + ErrorModel(logger:ILogger<ErrorModel>)
    + RequestId : string <<get>> <<set>>
    + ShowRequestId : bool <<get>>
    + OnGet() : void
}
class "ILogger`1"<T> {
}
PageModel <|-- ErrorModel
ErrorModel --> "_logger<ErrorModel>" "ILogger`1"
class u <<static>> {
    + {static} hashpassword(password:string) : string
}
interface "IGenericDataRepository`1"<T> {
    GetAll(filter:Expression<Func<T, bool>>, orderBy:Func<IQueryable<T>, IOrderedQueryable<T>>, includeProperties:string) : IEnumerable<T>
    GetByID(id:object) : T
    Insert(obj:T) : bool
    Update(obj:T) : bool
    Delete(id:object) : bool
    Delete(obj:T) : bool
    Save() : void
}
interface IRepositoryReference {
    BeginTransaction() : void
    Commit() : void
    Rollback() : void
    Dispose() : void
}
class Pages_Error {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
Pages_Error --> "Model" ErrorModel
class Pages__ViewImports {
    + <<async>> <<override>> ExecuteAsync() : global::System.Threading.Tasks.Task
}
class "RazorPage`1"<T> {
}
@enduml
