@startuml
class Program {
    + {static} Main(args:string[]) : void
    + {static} CreateHostBuilder(args:string[]) : IHostBuilder
}
class Startup {
    + Startup(configuration:IConfiguration)
    + Configuration : IConfiguration <<get>> <<set>>
    + ConfigureServices(services:IServiceCollection) : void
    + Configure(app:IApplicationBuilder, env:IWebHostEnvironment) : void
}
class DonorController {
    - <<readonly>> _context : DBContext
    settings : JsonSerializerSettings
    + DonorController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(donor:Donor) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, donor:Donor) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Donor) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
ControllerBase <|-- DonorController
"IUserInterfaceCRUD`1" "<Donor>" <|-- DonorController
class EmployeeController {
    - <<readonly>> _context : DBContext
    settings : JsonSerializerSettings
    + EmployeeController(context:DBContext)
    + <<async>> Create(template:Employee) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:Employee) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Employee) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
    + Exists(id:string) : bool
}
ControllerBase <|-- EmployeeController
"IUserInterfaceCRUD`1" "<Employee>" <|-- EmployeeController
class ProjectController {
    - <<readonly>> _context : DBContext
    settings : JsonSerializerSettings
    + ProjectController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(template:Project) : Task<ActionResult<string>>
    + <<async>> GetProject() : Task<ActionResult<IEnumerable<Project>>>
    + <<async>> GetProject(id:string) : Task<ActionResult<Project>>
    + <<async>> PutProject(id:string, project:Project) : Task<IActionResult>
    + <<async>> PostProject(project:Project) : Task<ActionResult<Project>>
    + <<async>> DeleteProject(id:string) : Task<IActionResult>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:Project) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Project) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
ControllerBase <|-- ProjectController
"IUserInterfaceCRUD`1" "<Project>" <|-- ProjectController
class ServiceCenterController {
    - <<readonly>> _context : DBContext
    settings : JsonSerializerSettings
    + ServiceCenterController(context:DBContext)
    + <<async>> Create(template:ServiceCenter) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:ServiceCenter) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:ServiceCenter) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + Settings() : string
    + Exists(id:string) : bool
}
ControllerBase <|-- ServiceCenterController
"IUserInterfaceCRUD`1" "<ServiceCenter>" <|-- ServiceCenterController
class UserController {
    - <<readonly>> _context : DBContext
    + UserController(context:DBContext)
    + <<async>> LoginUser(user:User) : Task<ActionResult<String>>
    + <<async>> Create(template:User) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:User) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:User) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
    + Exists(id:string) : bool
}
ControllerBase <|-- UserController
"IUserInterfaceCRUD`1" "<User>" <|-- UserController
class VolunteerController {
    - <<readonly>> _context : DBContext
    settings : JsonSerializerSettings
    + VolunteerController(context:DBContext)
    + Exists(id:string) : bool
    + <<async>> Create(template:Volunteer) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:Volunteer) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:Volunteer) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + Settings() : string
}
ControllerBase <|-- VolunteerController
"IUserInterfaceCRUD`1" "<Volunteer>" <|-- VolunteerController
class VolunteerWorkController {
    - <<readonly>> _context : DBContext
    settings : JsonSerializerSettings
    + VolunteerWorkController(context:DBContext)
    + <<async>> Create(template:VolunteerWork) : Task<ActionResult<string>>
    + <<async>> Get(id:string) : Task<ActionResult<string>>
    + <<async>> All() : Task<ActionResult<string>>
    + <<async>> Update(id:string, template:VolunteerWork) : Task<ActionResult<string>>
    + <<async>> UpdateAndFetchAll(id:string, template:VolunteerWork) : Task<ActionResult<string>>
    + <<async>> Delete(id:string) : Task<ActionResult<string>>
    + Exists(id:string) : bool
    + Settings() : string
}
ControllerBase <|-- VolunteerWorkController
"IUserInterfaceCRUD`1" "<VolunteerWork>" <|-- VolunteerWorkController
class DBContext {
    + DBContext(options:DbContextOptions<DBContext>)
    + Users : DbSet<User> <<get>> <<set>>
    + ServiceCenters : DbSet<ServiceCenter> <<get>> <<set>>
    + Employee : DbSet<Employee> <<get>> <<set>>
    + Volunteer : DbSet<Volunteer> <<get>> <<set>>
    + Donor : DbSet<Donor> <<get>> <<set>>
    + VolunteerWork : DbSet<VolunteerWork> <<get>> <<set>>
    + Project : DbSet<Project> <<get>> <<set>>
    # <<override>> OnModelCreating(modelBuilder:ModelBuilder) : void
}
DbContext <|-- DBContext
interface "IUserInterfaceCRUD`1"<T> {
    Create(template:T) : Task<ActionResult<string>>
    Get(id:string) : Task<ActionResult<string>>
    Update(id:string, template:T) : Task<ActionResult<string>>
    UpdateAndFetchAll(id:string, template:T) : Task<ActionResult<string>>
    Delete(id:string) : Task<ActionResult<string>>
    All() : Task<ActionResult<string>>
    Settings() : string
    Exists(id:string) : bool
}
class restructurev1 <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- restructurev1
class restructurev1 <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class createdDonorType <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- createdDonorType
class createdDonorType <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class createdVolunteerWork <<partial>> {
    # <<override>> Up(migrationBuilder:MigrationBuilder) : void
    # <<override>> Down(migrationBuilder:MigrationBuilder) : void
}
Migration <|-- createdVolunteerWork
class createdVolunteerWork <<partial>> {
    # <<override>> BuildTargetModel(modelBuilder:ModelBuilder) : void
}
class DBContextModelSnapshot <<partial>> {
    # <<override>> BuildModel(modelBuilder:ModelBuilder) : void
}
ModelSnapshot <|-- DBContextModelSnapshot
class Donor {
    + donorName : string <<get>> <<set>>
    + donorType : string <<get>> <<set>>
    + <<virtual>> User : User <<get>> <<set>>
}
User <|-- Donor
class Employee {
    + EmployeeNationalId : string <<get>> <<set>>
    + BankName : string <<get>> <<set>>
    + BankAccountNumber : string <<get>> <<set>>
    + PAYE : string <<get>> <<set>>
    + DateJoined : string <<get>> <<set>>
    + EmployeeType : string <<get>> <<set>>
    + EmployeeRole : string <<get>> <<set>>
    + <<virtual>> User : User <<get>> <<set>>
}
User <|-- Employee
class Project {
    + ProjectId : string <<get>> <<set>>
    + ProjectName : string <<get>> <<set>>
    + ProjectDescription : string <<get>> <<set>>
    + ProjectStartDate : string <<get>> <<set>>
    + ProjectEndDate : string <<get>> <<set>>
    + ProjectCompletionDate : string <<get>> <<set>>
    + ProjectStatus : string <<get>> <<set>>
    + ProjectType : string <<get>> <<set>>
    + ProjectBudget : double <<get>> <<set>>
    + ServiceCenterId : string <<get>> <<set>>
    + <<virtual>> ServiceCenter : ServiceCenter <<get>> <<set>>
}
class ServiceCenter {
    + ServiceCenterId : string <<get>> <<set>>
    + ServiceCenterName : string <<get>> <<set>>
    + ServiceCenterAddress : string <<get>> <<set>>
    + RegionalDirectorId : string <<get>> <<set>>
    + <<virtual>> RegionalDirectorName : string <<get>> <<set>>
    + <<virtual>> RegionalDirector : Employee <<get>> <<set>>
}
class Settings {
    + ColumnSettings : Dictionary<string, ColumnHeader>
    + FieldSettings : Dictionary<string, InputType>
}
class InputType {
    + type : string <<get>> <<set>>
    + displayLabel : string <<get>> <<set>>
    + editable : bool <<get>> <<set>>
    + primaryKey : bool <<get>> <<set>>
    + toolTip : string <<get>> <<set>>
}
class "DropdownInputType`1"<T> {
    + options : List<DropdownOption<T>> <<get>> <<set>>
}
class DropdownInputType {
    + options : List<DropdownOption> <<get>> <<set>>
}
class "DropdownOption`1"<T> {
    + value : T <<get>> <<set>>
    + label : string <<get>> <<set>>
}
class DropdownOption {
    + value : string <<get>> <<set>>
    + label : string <<get>> <<set>>
}
class ColumnHeader {
    + displayHeader : string <<get>> <<set>>
}
InputType <|-- "DropdownInputType`1"
InputType <|-- DropdownInputType
class User {
    + UserId : string <<get>> <<set>>
    + username : string <<get>> <<set>>
    + Email : string <<get>> <<set>>
    + Password : string <<get>> <<set>>
    + Role : string <<get>> <<set>>
    + phoneNumber : string <<get>> <<set>>
    + address : string <<get>> <<set>>
}
class Volunteer {
    + VolunteerNationalId : string <<get>> <<set>>
    + VolunteerDateJoined : string <<get>> <<set>>
    + VolunteerDateBirth : string <<get>> <<set>>
    + Qualifications : string <<get>> <<set>>
    + CriminalHistory : string <<get>> <<set>>
    + CriminalHistoryDesc : string <<get>> <<set>>
    + ApprovalStatus : string <<get>> <<set>>
    + ApprovedBy : string <<get>> <<set>>
    + <<virtual>> User : User <<get>> <<set>>
}
User <|-- Volunteer
class VolunteerWork {
    + VolunteerWorkId : string <<get>> <<set>>
    + ShiftStart : string <<get>> <<set>>
    + ShiftEnd : string <<get>> <<set>>
    + SupervisingEmployee : string <<get>> <<set>>
    + VolunteerId : string <<get>> <<set>>
    + projectId : string <<get>> <<set>>
    + <<virtual>> employee : Employee <<get>> <<set>>
    + <<virtual>> volunteer : Volunteer <<get>> <<set>>
    + <<virtual>> project : Project <<get>> <<set>>
}
class ErrorModel {
    - <<readonly>> _logger : ILogger<ErrorModel>
    + ErrorModel(logger:ILogger<ErrorModel>)
    + RequestId : string <<get>> <<set>>
    + ShowRequestId : bool <<get>>
    + OnGet() : void
}
PageModel <|-- ErrorModel
@enduml
